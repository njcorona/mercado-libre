# shipping_values <- df$shipping[!duplicated(df$shipping)]
# df$shipping <- sapply(df$shipping, function(x) { return ( if (is.na(x)) { which(is.na(shipping_values)) } else { which(x == shipping_values) }) })
#
# free_return_values <- df$free_return[!duplicated(df$free_return)]
# df$free_return <- sapply(df$free_return, function(x) { return ( if (is.na(x)) { which(is.na(free_return_values)) } else { which(x == free_return_values) }) })
#
# free_return_info_values <- df$free_return_info[!duplicated(df$free_return_info)]
# df$free_return_info <- sapply(df$free_return_info, function(x) { return ( if (is.na(x)) { which(is.na(free_return_info_values)) } else { which(x == free_return_info_values) }) })
df$review_avg <- as.numeric(df$review_avg)
df$num_reviews <- as.numeric(df$num_reviews)
# x[17] is the five_star
# x[18] is the four_star
# x[19] is the three_star
# x[20] is the two_star
# x[21] is the one_star
# First, set all star values to zero if num_reviews == 1 or == 2.
df[which(df$num_reviews == 1 | df$num_reviews == 2), c(17:21)] <- 0
# Then, adjust individually as necessary.
df[which(df$num_reviews == 1 & df$review_avg == 1), 21] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 2), 20] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 3), 19] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 4), 18] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 5), 17] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 1), 21] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 1.5), 21] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 1.5), 20] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 2), 20] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 2.5), 20] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 2.5), 19] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 3), 19] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 3.5), 19] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 3.5), 18] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 4), 18] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 4.5), 18] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 4.5), 17] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 5), 17] <- 2
# Identify numbers with two periods.
df$curr_price <- sapply(df$curr_price, function(x) {
if (str_count(x, "[\\.]") == 2) {
return(str_replace(x, "[\\.]", ""))
} else {
return(x)
}
})
df$curr_price <- as.numeric(df$curr_price)
write_csv(df, date %>% paste("iPhone8Cases_Prod_Col.csv", sep = ""))
write_csv(seller_df, date %>% paste("iPhone8Cases_Sell_Col.csv", sep = ""))
print(Sys.time())
# Iterates over all of the unique seller links to get their info.
for (i in 108:length(list_of_seller_links)) {
print(i)
link <- list_of_seller_links[i]
read_html <- read_html(as.character(link))
seller_name <- get_html_text(read_html, "#store-info__name")
if (length(seller_name) == 0) {
seller_name <- get_html_text(read_html, "#brand")
}
time_operating <- get_html_text(read_html, ".experience span span")
units_of_time_operating <- get_html_text(read_html, ".experience > span")
amt_sold <- get_html_text(read_html, ".seller-info__subtitle-sales span span:nth-child(1)")
timeframe_of_amt_sold <- get_html_text(read_html, ".seller-info__subtitle-sales > span")
leader_status <- get_html_text(read_html, ".leader-status__icon")
top_descriptors <- get_html_text(read_html, "h2")
top_descriptor1 <- NA
top_descriptor2 <- NA
if (length(top_descriptors) == 1) {
top_descriptor1 <- top_descriptors[1]
} else if (length(top_descriptors) == 2) {
top_descriptor1 <- top_descriptors[1]
top_descriptor2 <- top_descriptors[2]
}
num_reviews <- get_html_text(read_html, ".total")
num_neg_reviews <- get_html_text(read_html, ".buyers-feedback-bar--negative #feedback_good")
num_neutral_reviews <- get_html_text(read_html, ".buyers-feedback-bar--neutral #feedback_good")
num_pos_reviews <- get_html_text(read_html, ".buyers-feedback-bar--positive #feedback_good")
location <- get_html_text(read_html, ".location-subtitle")
seller_name <- turn_to_na(seller_name)
link <- turn_to_na(link)
time_operating <- turn_to_na(time_operating)
amt_sold <- turn_to_na(amt_sold)
leader_status <- turn_to_na(leader_status)
top_descriptor1 <- turn_to_na(top_descriptor1)
top_descriptor2 <- turn_to_na(top_descriptor2)
num_neg_reviews <- turn_to_na(num_neg_reviews)
num_reviews <- turn_to_na(num_reviews)
num_neutral_reviews <- turn_to_na(num_neutral_reviews)
num_pos_reviews <- turn_to_na(num_pos_reviews)
location <- turn_to_na(location)
units_of_time_operating <- turn_to_na(units_of_time_operating)
timeframe_of_amt_sold <- turn_to_na(timeframe_of_amt_sold)
seller_df1 <- tibble(seller_name, link, time_operating, units_of_time_operating, amt_sold, leader_status, top_descriptor1, top_descriptor2, num_reviews, num_neg_reviews, num_neutral_reviews, num_pos_reviews, location, timeframe_of_amt_sold)
list_of_dfs[[i]] <- seller_df1
}
seller_df <- bind_rows(list_of_dfs)
backup_seller_df <- seller_df
write_csv(seller_df, date %>% paste("iPhone8Cases_Sell_Col_Raw.csv", sep = ""))
#'
#' ### Cleaning the data.
## ------------------------------------------------------------------------
df <- backup_df
seller_df <- backup_seller_df
# Extracts number from "(### disponibles)"
df$in_stock <- sapply(df$in_stock, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]][1]) })
# Extracts units in time_operating (either months or years).
# Note: this may run into an error if anything in the vector is NA.
seller_df$units_of_time_operating <- sapply(seller_df$units_of_time_operating, function(x) { strsplit(x, " ")[[1]][2] })
# units_of_time_operating_values <- seller_df$units_of_time_operating[!duplicated(seller_df$units_of_time_operating)]
# seller_df$units_of_time_operating <- sapply(seller_df$units_of_time_operating, function(x) { return ( if (is.na(x)) { which(is.na(units_of_time_operating_values)) } else { which(x == units_of_time_operating_values) }) })
# Extracts units in time_operating (either months or years).
# Note: this may run into an error if anything in the vector is NA.
seller_df$units_timeframe_of_amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { strsplit(x, " ")[[1]][6] })
seller_df$amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { strsplit(x, " ")[[1]][1] })
seller_df$timeframe_of_amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { strsplit(x, " ")[[1]][7] })
if (nrow(seller_df[which(seller_df$units_timeframe_of_amt_sold == "aÃ±o"),]) > 0) {
seller_df[which(seller_df$units_timeframe_of_amt_sold == "aÃ±o"),]$timeframe_of_amt_sold <- "aÃ±os"
seller_df[which(seller_df$units_timeframe_of_amt_sold == "aÃ±o"),]$units_timeframe_of_amt_sold <- 1
}
if (nrow(seller_df[which(seller_df$units_timeframe_of_amt_sold == "mes"),]) > 0) {
seller_df[which(seller_df$units_timeframe_of_amt_sold == "mes"),]$timeframe_of_amt_sold <- "meses"
seller_df[which(seller_df$units_timeframe_of_amt_sold == "mes"),]$units_timeframe_of_amt_sold <- 1
}
# timeframe_of_amt_sold_values <- seller_df$timeframe_of_amt_sold[!duplicated(seller_df$timeframe_of_amt_sold)]
# seller_df$timeframe_of_amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { return ( if (is.na(x)) { which(is.na(timeframe_of_amt_sold_values)) } else { which(x == timeframe_of_amt_sold_values) }) })
df$num_installments <- sapply(df$num_installments, function(x) { return((gsub("[\t\n$]", "", x) %>% str_extract_all("[0-9]* cuotas"))[[1]][1]) })
df$amt_installments <- sapply(df$num_installments, function(x) { return((gsub("[\t\n$]", "", x) %>% strsplit(" "))[[1]][4]) })
# Extracts integers from num_sold data.
anon <- function(x) {
t <- substr(gsub("[[:space:]]", "", x),1,1000)
if (t == "Nuevo") {
return(0)
}
return(as.numeric(str_extract_all(t, "[0-9]+")[[1]][1]))
}
df$num_sold <- sapply(df$num_sold, anon)
# Split around "?" to isolate MercadoLider status for each seller.
seller_df$leader_status <- sapply(seller_df$leader_status, function(x) { strsplit(x, "Â¡")[[1]][1] })
# Extracts number from Bad, Good, and Neutral review counts for sellers.
seller_df$num_neg_reviews <- sapply(seller_df$num_neg_reviews, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]]) })
seller_df$num_pos_reviews <- sapply(seller_df$num_pos_reviews, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]]) })
seller_df$num_neutral_reviews <- sapply(seller_df$num_neutral_reviews, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]]) })
# Converts string fields to integer identifiers.  For example, all products with "llega manana" are assigned a 1 instead of "llega manana".
# arrival_time_values <- df$arrival_time[!duplicated(df$arrival_time)]
# df$arrival_time <- sapply(df$arrival_time, function(x) { return ( if (is.na(x)) { which(is.na(arrival_time_values)) } else { which(x == arrival_time_values) }) })
#
# shipping_values <- df$shipping[!duplicated(df$shipping)]
# df$shipping <- sapply(df$shipping, function(x) { return ( if (is.na(x)) { which(is.na(shipping_values)) } else { which(x == shipping_values) }) })
#
# free_return_values <- df$free_return[!duplicated(df$free_return)]
# df$free_return <- sapply(df$free_return, function(x) { return ( if (is.na(x)) { which(is.na(free_return_values)) } else { which(x == free_return_values) }) })
#
# free_return_info_values <- df$free_return_info[!duplicated(df$free_return_info)]
# df$free_return_info <- sapply(df$free_return_info, function(x) { return ( if (is.na(x)) { which(is.na(free_return_info_values)) } else { which(x == free_return_info_values) }) })
df$review_avg <- as.numeric(df$review_avg)
df$num_reviews <- as.numeric(df$num_reviews)
# x[17] is the five_star
# x[18] is the four_star
# x[19] is the three_star
# x[20] is the two_star
# x[21] is the one_star
# First, set all star values to zero if num_reviews == 1 or == 2.
df[which(df$num_reviews == 1 | df$num_reviews == 2), c(17:21)] <- 0
# Then, adjust individually as necessary.
df[which(df$num_reviews == 1 & df$review_avg == 1), 21] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 2), 20] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 3), 19] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 4), 18] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 5), 17] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 1), 21] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 1.5), 21] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 1.5), 20] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 2), 20] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 2.5), 20] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 2.5), 19] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 3), 19] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 3.5), 19] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 3.5), 18] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 4), 18] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 4.5), 18] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 4.5), 17] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 5), 17] <- 2
# Identify numbers with two periods.
df$curr_price <- sapply(df$curr_price, function(x) {
if (str_count(x, "[\\.]") == 2) {
return(str_replace(x, "[\\.]", ""))
} else {
return(x)
}
})
df$curr_price <- as.numeric(df$curr_price)
write_csv(df, date %>% paste("iPhone8Cases_Prod_Col.csv", sep = ""))
write_csv(seller_df, date %>% paste("iPhone8Cases_Sell_Col.csv", sep = ""))
print(Sys.time())
date <- "2019-08-08_"
setwd("C:/Users/Corona-Velez/Documents/GitHub/mercado-libre/MotorcycleHelmets")
date <- read_csv(date %>% paste("MotorcycleHelmets_Prod_Uru_Raw.csv", sep = ""))
backup_df <- df
list_of_seller_links <- df$seller_link
list_of_seller_links <- list_of_seller_links[!duplicated(list_of_seller_links)]
list_of_seller_links <- list_of_seller_links[!is.na(list_of_seller_links)]
list_of_dfs <- vector("list", 3000)
seller_df <- NULL
# Iterates over all of the unique seller links to get their info.
for (i in 1:length(list_of_seller_links)) {
print(i)
link <- list_of_seller_links[i]
read_html <- read_html(as.character(link))
seller_name <- get_html_text(read_html, "#store-info__name")
if (length(seller_name) == 0) {
seller_name <- get_html_text(read_html, "#brand")
}
time_operating <- get_html_text(read_html, ".data-level__description~ .data-level__description+ .data-level__description .data-level__number")
units_of_time_operating <- get_html_text(read_html, ".data-level__description~ .data-level__description+ .data-level__description > span")
if (length(time_operating) > 0) {
# If there are four descriptors, the time operating becomes the fourth descriptor.
if (time_operating[1] == "Vendedor destacado") {
time_operating <- get_html_text(read_html, ".data-level__description:nth-child(4) .data-level__number")
units_of_time_operating <- get_html_text(read_html, ".data-level__description:nth-child(4) > span")
}
}
amt_sold <- get_html_text(read_html, ".data-level__description:nth-child(2) .data-level__number")
timeframe_of_amt_sold <- get_html_text(read_html, ".seller-info__subtitle-sales > span")
leader_status <- get_html_text(read_html, ".leader-status__icon")
top_descriptors <- get_html_text(read_html, "h2")
top_descriptor1 <- NA
top_descriptor2 <- NA
if (length(top_descriptors) == 1) {
top_descriptor1 <- top_descriptors[1]
} else if (length(top_descriptors) == 2) {
top_descriptor1 <- top_descriptors[1]
top_descriptor2 <- top_descriptors[2]
}
num_reviews <- get_html_text(read_html, ".total")
num_neg_reviews <- get_html_text(read_html, ".buyers-feedback-bar--negative #feedback_good")
num_neutral_reviews <- get_html_text(read_html, ".buyers-feedback-bar--neutral #feedback_good")
num_pos_reviews <- get_html_text(read_html, ".buyers-feedback-bar--positive #feedback_good")
location <- get_html_text(read_html, ".location-subtitle")
seller_name <- turn_to_na(seller_name)
link <- turn_to_na(link)
time_operating <- turn_to_na(time_operating)
amt_sold <- turn_to_na(amt_sold)
leader_status <- turn_to_na(leader_status)
top_descriptor1 <- turn_to_na(top_descriptor1)
top_descriptor2 <- turn_to_na(top_descriptor2)
num_neg_reviews <- turn_to_na(num_neg_reviews)
num_reviews <- turn_to_na(num_reviews)
num_neutral_reviews <- turn_to_na(num_neutral_reviews)
num_pos_reviews <- turn_to_na(num_pos_reviews)
location <- turn_to_na(location)
units_of_time_operating <- turn_to_na(units_of_time_operating)
timeframe_of_amt_sold <- turn_to_na(timeframe_of_amt_sold)
seller_df1 <- tibble(seller_name, link, time_operating, units_of_time_operating, amt_sold, leader_status, top_descriptor1, top_descriptor2, num_reviews, num_neg_reviews, num_neutral_reviews, num_pos_reviews, location, timeframe_of_amt_sold)
list_of_dfs[[i]] <- seller_df1
}
seller_df <- bind_rows(list_of_dfs)
backup_seller_df <- seller_df
write_csv(seller_df, date %>% paste("MotorcycleHelmets_Sell_Uru_Raw.csv", sep = ""))
#'
#' ### Cleaning the data.
## ------------------------------------------------------------------------
# Extracts number from "(### disponibles)"
df$in_stock <- sapply(df$in_stock, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]][1]) })
# Extracts units in time_operating (either months or years).
# Note: this may run into an error if anything in the vector is NA.
seller_df$units_of_time_operating <- sapply(seller_df$units_of_time_operating, function(x) { strsplit(x, " ")[[1]][2] })
# units_of_time_operating_values <- seller_df$units_of_time_operating[!duplicated(seller_df$units_of_time_operating)]
# seller_df$units_of_time_operating <- sapply(seller_df$units_of_time_operating, function(x) { return ( if (is.na(x)) { which(is.na(units_of_time_operating_values)) } else { which(x == units_of_time_operating_values) }) })
# Extracts units in time_operating (either months or years).
# Note: this may run into an error if anything in the vector is NA.
seller_df$units_timeframe_of_amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { if (is.na(x)) { return(x) } else { strsplit(x, " ")[[1]][6] } })
# seller_df$amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { if (is.na(x)) { return(x) } else { strsplit(x, " ")[[1]][1] } })
seller_df$timeframe_of_amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { if (is.na(x)) { return(x) } else { strsplit(x, " ")[[1]][7] } })
if (nrow(seller_df[which(seller_df$units_timeframe_of_amt_sold == "aÃ±o"),]) > 0) {
seller_df[which(seller_df$units_timeframe_of_amt_sold == "aÃ±o"),]$timeframe_of_amt_sold <- "aÃ±os"
seller_df[which(seller_df$units_timeframe_of_amt_sold == "aÃ±o"),]$units_timeframe_of_amt_sold <- 1
}
if (nrow(seller_df[which(seller_df$units_timeframe_of_amt_sold == "mes"),]) > 0) {
seller_df[which(seller_df$units_timeframe_of_amt_sold == "mes"),]$timeframe_of_amt_sold <- "meses"
seller_df[which(seller_df$units_timeframe_of_amt_sold == "mes"),]$units_timeframe_of_amt_sold <- 1
}
# timeframe_of_amt_sold_values <- seller_df$timeframe_of_amt_sold[!duplicated(seller_df$timeframe_of_amt_sold)]
# seller_df$timeframe_of_amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { return ( if (is.na(x)) { which(is.na(timeframe_of_amt_sold_values)) } else { which(x == timeframe_of_amt_sold_values) }) })
# Also applied to Mexico.
stored_installments <- df$num_installments
df$num_installments <- sapply(df$num_installments, function(x) { return((gsub("[\t\n$]", "", x) %>% str_extract_all("[0-9]* cuotas"))[[1]][1]) })
df$amt_installments <- sapply(c(1:length(stored_installments)), function(i) {
str <- (gsub("[\t\n$]", "", stored_installments[i]) %>% strsplit(" "))[[1]][4]
str_1 <- substr(str, 1, str_length(str) - str_length(df$amt_installments[i]))
str_2 <- substr(str, str_length(str) - str_length(df$amt_installments[i]) + 1, str_length(str))
returner <- paste(str_1, ".", sep = "") %>% paste(str_2, sep = "")
return(returner)
})
# Extracts integers from num_sold data.
anon <- function(x) {
t <- substr(gsub("[[:space:]]", "", x),1,1000)
if (!is.na(t)) {
if (t == "Nuevo") {
return(0)
}
}
return(as.numeric(str_extract_all(t, "[0-9]+")[[1]][1]))
}
df$num_sold <- sapply(df$num_sold, anon)
# Split around "?" to isolate MercadoLider status for each seller.
seller_df$leader_status <- sapply(seller_df$leader_status, function(x) { strsplit(x, "Â¡")[[1]][1] })
# Extracts number from Bad, Good, and Neutral review counts for sellers.
seller_df$num_neg_reviews <- sapply(seller_df$num_neg_reviews, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]]) })
seller_df$num_pos_reviews <- sapply(seller_df$num_pos_reviews, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]]) })
seller_df$num_neutral_reviews <- sapply(seller_df$num_neutral_reviews, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]]) })
# Converts string fields to integer identifiers.  For example, all products with "llega manana" are assigned a 1 instead of "llega manana".
# arrival_time_values <- df$arrival_time[!duplicated(df$arrival_time)]
# df$arrival_time <- sapply(df$arrival_time, function(x) { return ( if (is.na(x)) { which(is.na(arrival_time_values)) } else { which(x == arrival_time_values) }) })
#
# shipping_values <- df$shipping[!duplicated(df$shipping)]
# df$shipping <- sapply(df$shipping, function(x) { return ( if (is.na(x)) { which(is.na(shipping_values)) } else { which(x == shipping_values) }) })
#
# free_return_values <- df$free_return[!duplicated(df$free_return)]
# df$free_return <- sapply(df$free_return, function(x) { return ( if (is.na(x)) { which(is.na(free_return_values)) } else { which(x == free_return_values) }) })
#
# free_return_info_values <- df$free_return_info[!duplicated(df$free_return_info)]
# df$free_return_info <- sapply(df$free_return_info, function(x) { return ( if (is.na(x)) { which(is.na(free_return_info_values)) } else { which(x == free_return_info_values) }) })
df$review_avg <- as.numeric(df$review_avg)
df$num_reviews <- as.numeric(df$num_reviews)
# x[17] is the five_star
# x[18] is the four_star
# x[19] is the three_star
# x[20] is the two_star
# x[21] is the one_star
# First, set all star values to zero if num_reviews == 1 or == 2.
df[which(df$num_reviews == 1 | df$num_reviews == 2), c(17:21)] <- 0
# Then, adjust individually as necessary.
df[which(df$num_reviews == 1 & df$review_avg == 1), 21] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 2), 20] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 3), 19] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 4), 18] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 5), 17] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 1), 21] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 1.5), 21] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 1.5), 20] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 2), 20] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 2.5), 20] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 2.5), 19] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 3), 19] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 3.5), 19] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 3.5), 18] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 4), 18] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 4.5), 18] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 4.5), 17] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 5), 17] <- 2
write_csv(df, date %>% paste("MotorcycleHelmets_Prod_Uru.csv", sep = ""))
write_csv(seller_df, date %>% paste("MotorcycleHelmets_Sell_Uru.csv", sep = ""))
print(Sys.time())
date
date <- "2019-08-08+"
date <- "2019-08-08_"
date
df <- read_csv(date %>% paste("MotorcycleHelmets_Prod_Uru_Raw.csv", sep = ""))
backup_df <- df
list_of_seller_links <- df$seller_link
list_of_seller_links <- list_of_seller_links[!duplicated(list_of_seller_links)]
list_of_seller_links <- list_of_seller_links[!is.na(list_of_seller_links)]
list_of_dfs <- vector("list", 3000)
seller_df <- NULL
# Iterates over all of the unique seller links to get their info.
for (i in 1:length(list_of_seller_links)) {
print(i)
link <- list_of_seller_links[i]
read_html <- read_html(as.character(link))
seller_name <- get_html_text(read_html, "#store-info__name")
if (length(seller_name) == 0) {
seller_name <- get_html_text(read_html, "#brand")
}
time_operating <- get_html_text(read_html, ".data-level__description~ .data-level__description+ .data-level__description .data-level__number")
units_of_time_operating <- get_html_text(read_html, ".data-level__description~ .data-level__description+ .data-level__description > span")
if (length(time_operating) > 0) {
# If there are four descriptors, the time operating becomes the fourth descriptor.
if (time_operating[1] == "Vendedor destacado") {
time_operating <- get_html_text(read_html, ".data-level__description:nth-child(4) .data-level__number")
units_of_time_operating <- get_html_text(read_html, ".data-level__description:nth-child(4) > span")
}
}
amt_sold <- get_html_text(read_html, ".data-level__description:nth-child(2) .data-level__number")
timeframe_of_amt_sold <- get_html_text(read_html, ".seller-info__subtitle-sales > span")
leader_status <- get_html_text(read_html, ".leader-status__icon")
top_descriptors <- get_html_text(read_html, "h2")
top_descriptor1 <- NA
top_descriptor2 <- NA
if (length(top_descriptors) == 1) {
top_descriptor1 <- top_descriptors[1]
} else if (length(top_descriptors) == 2) {
top_descriptor1 <- top_descriptors[1]
top_descriptor2 <- top_descriptors[2]
}
num_reviews <- get_html_text(read_html, ".total")
num_neg_reviews <- get_html_text(read_html, ".buyers-feedback-bar--negative #feedback_good")
num_neutral_reviews <- get_html_text(read_html, ".buyers-feedback-bar--neutral #feedback_good")
num_pos_reviews <- get_html_text(read_html, ".buyers-feedback-bar--positive #feedback_good")
location <- get_html_text(read_html, ".location-subtitle")
seller_name <- turn_to_na(seller_name)
link <- turn_to_na(link)
time_operating <- turn_to_na(time_operating)
amt_sold <- turn_to_na(amt_sold)
leader_status <- turn_to_na(leader_status)
top_descriptor1 <- turn_to_na(top_descriptor1)
top_descriptor2 <- turn_to_na(top_descriptor2)
num_neg_reviews <- turn_to_na(num_neg_reviews)
num_reviews <- turn_to_na(num_reviews)
num_neutral_reviews <- turn_to_na(num_neutral_reviews)
num_pos_reviews <- turn_to_na(num_pos_reviews)
location <- turn_to_na(location)
units_of_time_operating <- turn_to_na(units_of_time_operating)
timeframe_of_amt_sold <- turn_to_na(timeframe_of_amt_sold)
seller_df1 <- tibble(seller_name, link, time_operating, units_of_time_operating, amt_sold, leader_status, top_descriptor1, top_descriptor2, num_reviews, num_neg_reviews, num_neutral_reviews, num_pos_reviews, location, timeframe_of_amt_sold)
list_of_dfs[[i]] <- seller_df1
}
seller_df <- bind_rows(list_of_dfs)
backup_seller_df <- seller_df
write_csv(seller_df, date %>% paste("MotorcycleHelmets_Sell_Uru_Raw.csv", sep = ""))
#'
#' ### Cleaning the data.
## ------------------------------------------------------------------------
# Extracts number from "(### disponibles)"
df$in_stock <- sapply(df$in_stock, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]][1]) })
# Extracts units in time_operating (either months or years).
# Note: this may run into an error if anything in the vector is NA.
seller_df$units_of_time_operating <- sapply(seller_df$units_of_time_operating, function(x) { strsplit(x, " ")[[1]][2] })
# units_of_time_operating_values <- seller_df$units_of_time_operating[!duplicated(seller_df$units_of_time_operating)]
# seller_df$units_of_time_operating <- sapply(seller_df$units_of_time_operating, function(x) { return ( if (is.na(x)) { which(is.na(units_of_time_operating_values)) } else { which(x == units_of_time_operating_values) }) })
# Extracts units in time_operating (either months or years).
# Note: this may run into an error if anything in the vector is NA.
seller_df$units_timeframe_of_amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { if (is.na(x)) { return(x) } else { strsplit(x, " ")[[1]][6] } })
# seller_df$amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { if (is.na(x)) { return(x) } else { strsplit(x, " ")[[1]][1] } })
seller_df$timeframe_of_amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { if (is.na(x)) { return(x) } else { strsplit(x, " ")[[1]][7] } })
if (nrow(seller_df[which(seller_df$units_timeframe_of_amt_sold == "aÃ±o"),]) > 0) {
seller_df[which(seller_df$units_timeframe_of_amt_sold == "aÃ±o"),]$timeframe_of_amt_sold <- "aÃ±os"
seller_df[which(seller_df$units_timeframe_of_amt_sold == "aÃ±o"),]$units_timeframe_of_amt_sold <- 1
}
if (nrow(seller_df[which(seller_df$units_timeframe_of_amt_sold == "mes"),]) > 0) {
seller_df[which(seller_df$units_timeframe_of_amt_sold == "mes"),]$timeframe_of_amt_sold <- "meses"
seller_df[which(seller_df$units_timeframe_of_amt_sold == "mes"),]$units_timeframe_of_amt_sold <- 1
}
# timeframe_of_amt_sold_values <- seller_df$timeframe_of_amt_sold[!duplicated(seller_df$timeframe_of_amt_sold)]
# seller_df$timeframe_of_amt_sold <- sapply(seller_df$timeframe_of_amt_sold, function(x) { return ( if (is.na(x)) { which(is.na(timeframe_of_amt_sold_values)) } else { which(x == timeframe_of_amt_sold_values) }) })
# Also applied to Mexico.
stored_installments <- df$num_installments
df$num_installments <- sapply(df$num_installments, function(x) { return((gsub("[\t\n$]", "", x) %>% str_extract_all("[0-9]* cuotas"))[[1]][1]) })
df$amt_installments <- sapply(c(1:length(stored_installments)), function(i) {
str <- (gsub("[\t\n$]", "", stored_installments[i]) %>% strsplit(" "))[[1]][4]
str_1 <- substr(str, 1, str_length(str) - str_length(df$amt_installments[i]))
str_2 <- substr(str, str_length(str) - str_length(df$amt_installments[i]) + 1, str_length(str))
returner <- paste(str_1, ".", sep = "") %>% paste(str_2, sep = "")
return(returner)
})
# Extracts integers from num_sold data.
anon <- function(x) {
t <- substr(gsub("[[:space:]]", "", x),1,1000)
if (!is.na(t)) {
if (t == "Nuevo") {
return(0)
}
}
return(as.numeric(str_extract_all(t, "[0-9]+")[[1]][1]))
}
df$num_sold <- sapply(df$num_sold, anon)
# Split around "?" to isolate MercadoLider status for each seller.
seller_df$leader_status <- sapply(seller_df$leader_status, function(x) { strsplit(x, "Â¡")[[1]][1] })
# Extracts number from Bad, Good, and Neutral review counts for sellers.
seller_df$num_neg_reviews <- sapply(seller_df$num_neg_reviews, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]]) })
seller_df$num_pos_reviews <- sapply(seller_df$num_pos_reviews, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]]) })
seller_df$num_neutral_reviews <- sapply(seller_df$num_neutral_reviews, function(x) { as.numeric(str_extract_all(x, "[0-9]+")[[1]]) })
# Converts string fields to integer identifiers.  For example, all products with "llega manana" are assigned a 1 instead of "llega manana".
# arrival_time_values <- df$arrival_time[!duplicated(df$arrival_time)]
# df$arrival_time <- sapply(df$arrival_time, function(x) { return ( if (is.na(x)) { which(is.na(arrival_time_values)) } else { which(x == arrival_time_values) }) })
#
# shipping_values <- df$shipping[!duplicated(df$shipping)]
# df$shipping <- sapply(df$shipping, function(x) { return ( if (is.na(x)) { which(is.na(shipping_values)) } else { which(x == shipping_values) }) })
#
# free_return_values <- df$free_return[!duplicated(df$free_return)]
# df$free_return <- sapply(df$free_return, function(x) { return ( if (is.na(x)) { which(is.na(free_return_values)) } else { which(x == free_return_values) }) })
#
# free_return_info_values <- df$free_return_info[!duplicated(df$free_return_info)]
# df$free_return_info <- sapply(df$free_return_info, function(x) { return ( if (is.na(x)) { which(is.na(free_return_info_values)) } else { which(x == free_return_info_values) }) })
df$review_avg <- as.numeric(df$review_avg)
df$num_reviews <- as.numeric(df$num_reviews)
# x[17] is the five_star
# x[18] is the four_star
# x[19] is the three_star
# x[20] is the two_star
# x[21] is the one_star
# First, set all star values to zero if num_reviews == 1 or == 2.
df[which(df$num_reviews == 1 | df$num_reviews == 2), c(17:21)] <- 0
# Then, adjust individually as necessary.
df[which(df$num_reviews == 1 & df$review_avg == 1), 21] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 2), 20] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 3), 19] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 4), 18] <- 1
df[which(df$num_reviews == 1 & df$review_avg == 5), 17] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 1), 21] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 1.5), 21] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 1.5), 20] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 2), 20] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 2.5), 20] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 2.5), 19] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 3), 19] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 3.5), 19] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 3.5), 18] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 4), 18] <- 2
df[which(df$num_reviews == 2 & df$review_avg == 4.5), 18] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 4.5), 17] <- 1
df[which(df$num_reviews == 2 & df$review_avg == 5), 17] <- 2
write_csv(df, date %>% paste("MotorcycleHelmets_Prod_Uru.csv", sep = ""))
write_csv(seller_df, date %>% paste("MotorcycleHelmets_Sell_Uru.csv", sep = ""))
print(Sys.time())
